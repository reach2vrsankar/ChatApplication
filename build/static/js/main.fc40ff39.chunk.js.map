{"version":3,"sources":["components/MessageForm.jsx","components/MyMessage.jsx","components/TheirMessage.jsx","components/ChatFeed.jsx","components/LoginForm.jsx","App.js","index.js"],"names":["MessageForm","props","useState","value","setValue","chatId","creds","handleSubmit","event","preventDefault","text","trim","length","sendMessage","className","onSubmit","placeholder","onChange","target","isTyping","htmlFor","PictureOutlined","type","multiple","id","style","display","files","SendOutlined","MyMessage","message","attachments","src","file","alt","float","marginRight","color","backgroundColor","TheirMessage","lastMessage","isFirstMessageByUser","sender","username","backgroundimage","avatar","marginLeft","ChatFeed","chats","activeChat","userName","messages","chat","renderReadReceipts","isMyMessage","people","map","person","index","last_read","backgroundImage","renderMessages","keys","Object","key","lastMessageKey","width","title","height","LoginForm","setUsername","password","setPassword","error","setError","e","a","authObject","axios","get","headers","localStorage","setItem","window","location","reload","required","align","App","getItem","projectID","userSecret","renderChatFeed","ChatAppProps","ReactDOM","render","document","getElementById"],"mappings":"wOA0EeA,EArEK,SAACC,GAEjB,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAEQC,EAAkBJ,EAAlBI,OAAQC,EAAUL,EAAVK,MAEVC,EAAe,SAACC,GAElBA,EAAMC,iBAEN,IAAMC,EAAOP,EAAMQ,OAEhBD,EAAKE,OAAS,GAAGC,YAAYP,EAAOD,EAAO,CAAEK,SAEhDN,EAAS,KAmBb,OAEE,uBAAMU,UAAU,eAAeC,SAAUR,EAAzC,UACI,uBACMO,UAAU,gBACVE,YAAY,oBACZb,MAAOA,EACPc,SArBS,SAACT,GAElBJ,EAASI,EAAMU,OAAOf,OAEtBgB,YAASlB,EAAOI,IAkBRU,SAAUR,IAEpB,uBAAOa,QAAQ,gBAAf,SAEI,sBAAMN,UAAU,eAAhB,SACM,cAACO,EAAA,EAAD,CAAiBP,UAAU,qBAGlC,uBACGQ,KAAK,OACLC,UAAU,EACVC,GAAG,gBACHC,MAAO,CAACC,QAAS,QACjBT,SA3Ba,SAACT,GAEdK,YAAYP,EAAOD,EAAQ,CAAEsB,MAAOnB,EAAMU,OAAOS,MAAOjB,KAAM,QA2BpE,wBAAQY,KAAK,SAASR,UAAU,cAAhC,SAEI,cAACc,EAAA,EAAD,CAAed,UAAU,oBCxCpBe,EAvBG,SAACC,GAAa,IAAD,EAE3B,OAAU,OAAPA,QAAO,IAAPA,GAAA,UAAAA,EAASC,mBAAT,eAAsBnB,QAAS,EAE1B,qBACIoB,IAAKF,EAAQC,YAAY,GAAGE,KAC5BC,IAAI,qBACJpB,UAAU,gBACVW,MAAO,CAAEU,MAAO,WAOxB,qBAAKrB,UAAU,UAAUW,MAAO,CAACU,MAAQ,QAASC,YAAa,OAAQC,MAAO,QAAQC,gBAAgB,WAAtG,SACKR,EAAQpB,QCwBN6B,EAxCM,SAAC,GAA8B,IAAD,IAA3BC,EAA2B,EAA3BA,YAAaV,EAAc,EAAdA,QAC3BW,GAAwBD,GAAeA,EAAYE,OAAOC,WAAab,EAAQY,OAAOC,SAC5F,OACI,sBAAK7B,UAAU,cAAf,UACM2B,GAEE,qBACI3B,UAAU,iBAEVW,MAAO,CAACmB,gBAAgB,OAAD,cAASd,QAAT,IAASA,GAAT,UAASA,EAASY,cAAlB,aAAS,EAAiBG,OAA1B,SAGtB,OAAPf,QAAO,IAAPA,GAAA,UAAAA,EAASC,mBAAT,eAAsBnB,QAAS,EAEjC,qBACIoB,IAAKF,EAAQC,YAAY,GAAGE,KAC5BC,IAAI,qBACJpB,UAAU,gBACVW,MAAO,CAAEqB,WAAaL,EAAuB,MAAQ,UAGzD,qBAAK3B,UAAU,UAAUW,MAAO,CAAEU,MAAO,OAAQG,gBAAgB,UAAWQ,WAAaL,EAAuB,MAAQ,QAAxH,SACMX,EAAQpB,WC0EXqC,EA1FE,SAAC9C,GAEd,IAAQ+C,EAA0C/C,EAA1C+C,MAAOC,EAAmChD,EAAnCgD,WAAYC,EAAuBjD,EAAvBiD,SAAUC,EAAalD,EAAbkD,SAE/BC,EAAOJ,GAASA,EAAMC,GAEtBI,EAAqB,SAACvB,EAASwB,GAEjC,OAAOF,EAAKG,OAAOC,KAAI,SAACC,EAAQC,GAAT,aAAkBD,EAAOE,YAAc7B,EAAQN,IAE9D,qBAGAV,UAAU,eACVW,MAAO,CACHU,MAAOmB,EAAc,QAAU,OAE/BM,gBAAgB,SAAD,cAAWH,QAAX,IAAWA,GAAX,UAAWA,EAAQA,cAAnB,aAAW,EAAgBZ,OAA3B,OAPnB,eAEaa,QAkBnBG,EAAiB,WAEnB,IAAMC,EAAOC,OAAOD,KAAKX,GAEzB,OAAOW,EAAKN,KAAI,SAACQ,EAAKN,GAElB,IAAM5B,EAAUqB,EAASa,GAEnBC,EAA2B,IAAVP,EAAc,KAAOI,EAAKJ,EAAM,GAEjDJ,EAAcJ,IAAapB,EAAQY,OAAOC,SAEhD,OACQ,sBAA4BlB,MAAO,CAAEyC,MAAO,QAA5C,UACI,qBAAKpD,UAAU,gBAAf,SAEIwC,EACE,cAAC,EAAD,CAAWxB,QAASA,IACrB,cAAC,EAAD,CAAcA,QAASA,EAASU,YAAaW,EAASc,OAK3D,qBAAKnD,UAAU,gBAAgBW,MAAO,CAACW,YAAakB,EAAc,OAAS,MAAOR,WAAYQ,EAAc,MAAO,QAAnH,SACMD,EAAmBvB,EAASwB,OAXtC,cAAmBI,QAqBnC,OAFAG,IAEIT,EAGA,sBAAKtC,UAAU,YAAf,UACI,sBAAKA,UAAU,uBAAf,UACI,sBAAKA,UAAU,aAAf,iBAA6BsC,QAA7B,IAA6BA,OAA7B,EAA6BA,EAAMe,MAAnC,OACA,qBAAKrD,UAAU,gBAAf,SACKsC,EAAKG,OAAOC,KAAI,SAACC,GAAD,iBAAcA,EAAOA,OAAOd,kBAGpDkB,IACD,qBAAKpC,MAAO,CAAE2C,OAAQ,WACtB,qBAAKtD,UAAU,yBAAf,SACoB,cAAC,EAAD,2BAAiBb,GAAjB,IAAwBI,OAAQ4C,UAb1C,e,yCClBHoB,EAjDD,WACd,MAAgCnE,mBAAS,IAAzC,mBAAOyC,EAAP,KAAiB2B,EAAjB,KACA,EAAgCpE,mBAAS,IAAzC,mBAAOqE,EAAP,KAAiBC,EAAjB,KACA,EAAwBtE,mBAAS,IAAjC,mBAAOuE,EAAP,KAAaC,EAAb,KAGMnE,EAAY,uCAAG,WAAOoE,GAAP,eAAAC,EAAA,6DACjBD,EAAElE,iBAEIoE,EAAa,CAAE,aAAc,uCAAwC,YAAalC,EAAU,cAAe4B,GAHhG,kBAOPO,IAAMC,IAAI,kCAAmC,CAAEC,QAASH,IAPjD,OASbI,aAAaC,QAAQ,WAAYvC,GACjCsC,aAAaC,QAAQ,WAAYX,GAEjCY,OAAOC,SAASC,SAZH,kDAeLX,EAAS,gCAfJ,0DAAH,sDAqBlB,OAEI,qBAAK5D,UAAU,UAAf,SACI,sBAAKA,UAAU,OAAf,UACI,oBAAIA,UAAU,QAAd,8BACA,uBAAMC,SAAUR,EAAhB,UACI,uBAAOe,KAAK,OAAOnB,MAAOwC,EAAU1B,SAAU,SAAC0D,GAAD,OAAOL,EAAYK,EAAEzD,OAAOf,QAAQW,UAAU,QAAQE,YAAY,WAAWsE,UAAQ,IACnI,uBAAOhE,KAAK,WAAWnB,MAAOoE,EAAUtD,SAAU,SAAC0D,GAAD,OAAOH,EAAYG,EAAEzD,OAAOf,QAAQW,UAAU,QAAQE,YAAY,WAAWsE,UAAQ,IACvI,qBAAKC,MAAM,SAAX,SACI,wBAAQjE,KAAM,SAASR,UAAU,SAAjC,SACI,yDAGR,qBAAIA,UAAU,QAAd,cAAwB2D,cClB7Be,EAlBH,WAER,OAAIP,aAAaQ,QAAQ,YAIrB,cAAC,IAAD,CACIrB,OAAO,QACPsB,UAAU,uCACVxC,SAAU+B,aAAaQ,QAAQ,YAC/BE,WAAYV,aAAaQ,QAAQ,YACjCG,eAAkB,SAACC,GAAD,OAAkB,cAAC,EAAD,eAAcA,OATb,cAAC,EAAD,KCFjDC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.fc40ff39.chunk.js","sourcesContent":["import { SendOutlined, PictureOutlined } from \"@ant-design/icons\";\r\nimport { useState } from 'react';\r\nimport { sendMessage, isTyping } from \"react-chat-engine\";\r\n\r\n\r\nconst MessageForm = (props) => {\r\n\r\n    const [value, setValue] = useState('');\r\n\r\n    const { chatId, creds } = props;\r\n\r\n    const handleSubmit = (event) => {\r\n\r\n        event.preventDefault();\r\n\r\n        const text = value.trim();\r\n\r\n        if(text.length > 0) sendMessage(creds, chatId,{ text });\r\n\r\n        setValue('');\r\n\r\n\r\n    }   \r\n    \r\n    const handleChange = (event) => {\r\n\r\n        setValue(event.target.value);\r\n\r\n        isTyping(props, chatId);\r\n\r\n    }\r\n    \r\n    const handleUpload = (event) => {\r\n\r\n            sendMessage(creds, chatId, { files: event.target.files, text: '' })\r\n    }\r\n\r\n\r\n    return(\r\n      \r\n      <form className=\"message-form\" onSubmit={handleSubmit}>\r\n          <input \r\n                className=\"message-input\"\r\n                placeholder=\"Send a message...\"\r\n                value={value}\r\n                onChange={handleChange}\r\n                onSubmit={handleSubmit}\r\n          />\r\n      <label htmlFor=\"upload-button\">\r\n\r\n          <span className=\"image-button\">\r\n                <PictureOutlined className=\"picture-icon\" />\r\n          </span>\r\n         </label>\r\n         <input\r\n            type=\"file\"\r\n            multiple={false}\r\n            id=\"upload-button\"\r\n            style={{display: 'none'}}\r\n            onChange={handleUpload}\r\n        />\r\n      <button type=\"submit\" className=\"send-button\">\r\n\r\n          <SendOutlined  className=\"send-icon\"/>\r\n\r\n      </button>\r\n      </form>\r\n      \r\n      \r\n        );\r\n\r\n}\r\n\r\n\r\nexport default MessageForm;","const MyMessage = (message) => {\r\n    \r\n    if(message?.attachments?.length > 0 ) {\r\n        return(\r\n            <img\r\n                src={message.attachments[0].file}\r\n                alt=\"message-attachment\"\r\n                className=\"message-image\"\r\n                style={{ float: 'right'}}\r\n                />\r\n        )\r\n    }\r\n\r\n\r\n    return(\r\n        <div className=\"message\" style={{float : 'right', marginRight: '18px', color: 'white',backgroundColor:'#3b2a50' }}>\r\n            {message.text}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default MyMessage;","const TheirMessage = ({ lastMessage, message }) => {\r\n    const isFirstMessageByUser = !lastMessage || lastMessage.sender.username !== message.sender.username;\r\n    return(\r\n        <div className=\"message-row\">\r\n            { isFirstMessageByUser && (\r\n\r\n                <div\r\n                    className=\"message-avatar\"\r\n                    \r\n                    style={{backgroundimage: `url(${message?.sender?.avatar})`}}\r\n                />    \r\n            )}\r\n            { message?.attachments?.length > 0 \r\n            ? (\r\n            <img\r\n                src={message.attachments[0].file}\r\n                alt=\"message-attachment\"\r\n                className=\"message-image\"\r\n                style={{ marginLeft : isFirstMessageByUser ? '4px' : '48px' }}\r\n                />\r\n        ) : (\r\n            <div className=\"message\" style={{ float: 'left', backgroundColor:'#CABCDC', marginLeft : isFirstMessageByUser ? '4px' : '48px' }}>\r\n                 {message.text}\r\n             </div>\r\n        )\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        </div>\r\n\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default TheirMessage;","import MessageForm from \"./MessageForm\";\r\nimport MyMessage from \"./MyMessage\";\r\nimport TheirMessage from \"./TheirMessage\";\r\n\r\n\r\n\r\nconst ChatFeed = (props) => { \r\n\r\n    const { chats, activeChat, userName, messages } = props;\r\n\r\n    const chat = chats && chats[activeChat];\r\n\r\n    const renderReadReceipts = (message, isMyMessage) => {\r\n\r\n        return chat.people.map((person, index)=> person.last_read === message.id && (\r\n\r\n                <div \r\n                \r\n                key={`read_${index}`}\r\n                className=\"read-receipt\"\r\n                style={{\r\n                    float: isMyMessage ? 'right' : 'left',\r\n                 \r\n                    backgroundImage: ` url( ${person?.person?.avatar})`\r\n                \r\n                }\r\n            }\r\n                \r\n                />\r\n\r\n                \r\n\r\n        ));\r\n\r\n    }\r\n    \r\n    const renderMessages = () => {\r\n\r\n        const keys = Object.keys(messages);\r\n        \r\n        return keys.map((key, index) => {\r\n            \r\n            const message = messages[key];\r\n            \r\n            const lastMessageKey = index === 0 ? null : keys[index-1];\r\n            \r\n            const isMyMessage = userName === message.sender.username;\r\n            \r\n            return(\r\n                    <div key = {`msg_${index}`} style={{ width: '100%'}} >\r\n                        <div className=\"message-block\">\r\n                        {\r\n                            isMyMessage\r\n                            ? <MyMessage message={message}/>\r\n                            :<TheirMessage message={message} lastMessage={messages[lastMessageKey]}/>\r\n\r\n                        }\r\n\r\n                        </div>\r\n                        <div className=\"read-receipts\" style={{marginRight: isMyMessage ? '18px' : '0px', marginLeft: isMyMessage ? '0px': '68px'}}>\r\n                            { renderReadReceipts(message, isMyMessage)}\r\n                                                          \r\n                        </div>\r\n \r\n                    </div>\r\n            );\r\n        })\r\n    }\r\n    renderMessages()\r\n\r\n    if(!chat)  return 'Loading...!';\r\n\r\n    return(\r\n        <div className=\"chat-feed\">\r\n            <div className=\"chat-title-container\">\r\n                <div className=\"chat-title\">{chat?.title} </div>\r\n                <div className=\"chat-subtitle\">\r\n                    {chat.people.map((person)=>` ${person.person.username}`)}\r\n                </div>\r\n            </div>\r\n            {renderMessages()}            \r\n            <div style={{ height: '100px'}} />\r\n            <div className=\"message-form-container\">\r\n                                <MessageForm {...props} chatId={activeChat} />\r\n\r\n            </div>\r\n        </div> \r\n    );\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default ChatFeed;\r\n\r\n","import axios from \"axios\";\r\nimport { useState } from \"react\"\r\n\r\nconst LoginForm = () => {\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [error,setError]= useState('');\r\n\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        const authObject = { 'project-ID': \"bc4296e4-da4f-4fc9-8f26-58682fb99850\", 'User-Name': username, 'User-Secret': password };\r\n\r\n        try {\r\n\r\n            await axios.get('https://api.chatengine.io/chats', { headers: authObject });\r\n            \r\n            localStorage.setItem('username', username);\r\n            localStorage.setItem('password', password);\r\n\r\n            window.location.reload();\r\n            \r\n        }catch(err) {\r\n                    setError('Oops, Incorrect Credentials.');\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return(\r\n\r\n        <div className=\"wrapper\">\r\n            <div className=\"form\">\r\n                <h1 className=\"title\">CHAT APPLICATION</h1>\r\n                <form onSubmit={handleSubmit}>\r\n                    <input type=\"text\" value={username} onChange={(e) => setUsername(e.target.value)} className=\"input\" placeholder=\"Username\" required />\r\n                    <input type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} className=\"input\" placeholder=\"Password\" required />\r\n                    <div align=\"center\">\r\n                        <button type =\"submit\" className=\"button\">\r\n                            <span>  Start Chatting </span>\r\n                        </button>\r\n                    </div>           \r\n                    <h2 className=\"error\"> {error}</h2>\r\n                </form>\r\n            </div>\r\n        </div> \r\n        \r\n        \r\n        \r\n    );\r\n}\r\n    export default LoginForm;","import { ChatEngine } from 'react-chat-engine';\r\nimport './App.css';\r\nimport ChatFeed from './components/ChatFeed';\r\nimport LoginForm from './components/LoginForm';\r\n\r\n\r\n\r\nconst App = () => {\r\n\r\n    if(!localStorage.getItem('username')) return <LoginForm />\r\n\r\n\r\n    return(\r\n        <ChatEngine\r\n            height=\"100vh\"\r\n            projectID=\"bc4296e4-da4f-4fc9-8f26-58682fb99850\"\r\n            userName={localStorage.getItem('username')}\r\n            userSecret={localStorage.getItem('password')}\r\n            renderChatFeed = {(ChatAppProps) => <ChatFeed {...ChatAppProps}/>}\r\n\r\n\r\n        />\r\n    );\r\n\r\n}\r\nexport default App;","import React from 'react';\r\nimport  ReactDOM  from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}